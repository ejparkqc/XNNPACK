// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
$import math
$assert IN_PTRS in ["MULTI", "REUSE"]
$assert OUT_PTRS in ["MULTI", "SWITCH", "MOV", "DEC"]
$assert SIZE in [8, 16, 32]
$assert TILE_HEIGHT in [2, 4, 8, 16, 32]
$TILE_WIDTH = int(1024/SIZE)
$NUM_ITERS = int(math.log2(TILE_HEIGHT))
$SUFFIX = ''
$TILE_SIZE = TILE_HEIGHT
$VECTOR_SIZE = int(128)
$NUM_D_REGISTERS=int(VECTOR_SIZE/64)

#include <xnnpack/simd/f32-hvx.h>

#include <assert.h>

#include "xnnpack/common.h"
#include "xnnpack/math.h"
#include "xnnpack/transpose.h"

void xnn_x${SIZE}_transposec_ukernel__${TILE_HEIGHT}x${TILE_WIDTH}_${IN_PTRS.lower()}_${OUT_PTRS.lower()}_hvx(
    const uint${SIZE}_t* input,
    uint${SIZE}_t* output,
    size_t input_stride,
    size_t output_stride,
    size_t block_width,
    size_t block_height) XNN_OOB_READS
{
  assert(block_width == 1 || output_stride >= block_height * sizeof(uint${SIZE}_t));
  assert(block_height == 1 || input_stride >= block_width * sizeof(uint${SIZE}_t));

  const size_t tile_height = ${TILE_HEIGHT};
  const size_t tile_width = ${TILE_WIDTH};
  const size_t tile_hbytes = tile_height * sizeof(uint${SIZE}_t);
  const size_t tile_wbytes = tile_width * sizeof(uint${SIZE}_t);
  const size_t input_reset = tile_wbytes - round_down_po2(block_height, tile_height) * input_stride;
  $if IN_PTRS == "MULTI":
    const size_t input_offset = tile_height * input_stride;
  $if OUT_PTRS in ["MOV", "DEC"]:
    const size_t output_reset = tile_width * output_stride - round_down_po2(block_height, 2) * sizeof(uint${SIZE}_t) - tile_hbytes;
  $else:
    const size_t output_reset = tile_width * output_stride - round_down_po2(block_height, 2) * sizeof(uint${SIZE}_t);

  $if IN_PTRS == "MULTI":
    const uint${SIZE}_t* i0 = input;
    $for N in range(1, TILE_HEIGHT):
      const uint${SIZE}_t* i${N} = (const uint${SIZE}_t*) ((uintptr_t) i${N-1} + input_stride);
  $else:
    const uint${SIZE}_t* i0 = input;
  $if OUT_PTRS == "MULTI":
    uint${SIZE}_t* o0 = (uint${SIZE}_t*) output;
    $for N in range(1, TILE_HEIGHT):
      uint${SIZE}_t* o${N} = (uint${SIZE}_t*) ((uintptr_t) o${N-1} + output_stride);
  $elif OUT_PTRS == "SWITCH":
    uint${SIZE}_t* o = (uint${SIZE}_t*) output;
  $else:
    uint${SIZE}_t* o = (uint${SIZE}_t*) ((uintptr_t) output - tile_hbytes);
  const size_t minus_output_stride = -output_stride;

  do {
    $if OUT_PTRS == "MULTI":
      if XNN_UNPREDICTABLE(block_width < 2) {
        o1 = o0;
      }
      $for N in range(2, TILE_HEIGHT, 2):
        if XNN_UNPREDICTABLE(block_width <= ${N}) {
          o${N} = o0;
        }
        if XNN_UNPREDICTABLE(block_width < ${N+2}) {
          o${N+1} = o0;
        }
    $elif OUT_PTRS in ["MOV", "DEC"]:
      const size_t rem = min(block_width - 1, ${TILE_HEIGHT - 1});
      const size_t oN_stride = rem * output_stride;
      const size_t oN_offset = oN_stride + tile_hbytes;
    $else:
      const size_t rem = min(block_width - 1, ${TILE_HEIGHT - 1});
      const size_t oN_stride = rem * output_stride;
    size_t bh = block_height;
    for (; bh >= ${TILE_HEIGHT}; bh -= ${TILE_HEIGHT}) {
      $for N in range(TILE_HEIGHT):
        $if IN_PTRS == "REUSE":
          const HVX_Vector v${NUM_ITERS}_${N} = *((HVX_UVector *) i0); i0 = (uint${SIZE}_t*) ((uintptr_t) i0 + input_stride);
        $else:
          const HVX_Vector v${NUM_ITERS}_${N} = *((HVX_UVector *) i${N}); i${N} = (uint${SIZE}_t*) ((uintptr_t) i${N} + input_offset);

      int rt = -${int(SIZE/8)};
      $for N in range(TILE_HEIGHT >> 1):
        const HVX_VectorPair v${NUM_ITERS-1}_${N} = Q6_W_vshuff_VVR(v${NUM_ITERS}_${2*N+1}, v${NUM_ITERS}_${2*N}, rt);

      $for M in range(1, NUM_ITERS):
        rt = rt << 1;
        $NUM_ITERS_O = int(math.pow(2, M - 1)) 
        $for N in range(0, TILE_HEIGHT >> 1, NUM_ITERS_O*2):
          $for O in range(NUM_ITERS_O):
            $PREV_PAIR = NUM_ITERS-M
            HVX_VectorPair v${PREV_PAIR-1}_${N+O*2} = Q6_W_vshuff_VVR(Q6_V_lo_W(v${PREV_PAIR}_${N+O+NUM_ITERS_O}), Q6_V_lo_W(v${PREV_PAIR}_${N+O}), rt);
            HVX_VectorPair v${PREV_PAIR-1}_${N+O*2+1} = Q6_W_vshuff_VVR(Q6_V_hi_W(v${PREV_PAIR}_${N+O+NUM_ITERS_O}), Q6_V_hi_W(v${PREV_PAIR}_${N+O}), rt);
            
      $if OUT_PTRS == "SWITCH":
        uint${SIZE}_t *oN = (uint${SIZE}_t*) ((uintptr_t) o + oN_stride);
        switch (rem) {
          $for N in reversed(range(2, TILE_HEIGHT, 2)):
            case ${N+1}:
              xnn_storeu_f32(oN, Q6_V_hi_W(v0_${int(N/2)}));
              oN = (uint${SIZE}_t*) ((uintptr_t) oN + minus_output_stride);
              XNN_FALLTHROUGH
            case ${N}:
              xnn_storeu_f32(oN, Q6_V_lo_W(v0_${int(N/2)}));
              oN = (uint${SIZE}_t*) ((uintptr_t) oN + minus_output_stride);
              XNN_FALLTHROUGH
          case 1:
            xnn_storeu_f32(oN, Q6_V_hi_W(v0_0));
            XNN_FALLTHROUGH
          case 0:
            xnn_storeu_f32(o, Q6_V_lo_W(v0_0)); 
            o = (uint${SIZE}_t*) ((uintptr_t) o + tile_hbytes);
            break;
          default:
            XNN_UNREACHABLE;
        }
      $elif OUT_PTRS in ["MOV", "DEC"]:
        o = (uint${SIZE}_t*) ((uintptr_t) o + oN_offset);
        xnn_storeu_f32(o, Q6_V_hi_W(v0_${(TILE_HEIGHT-1)>>1}));
        $if OUT_PTRS == "MOV":
          uint${SIZE}_t *oN = (uint${SIZE}_t*) ((uintptr_t) o + minus_output_stride);
        $for N in reversed(range(2, TILE_SIZE, 2)):
          if XNN_UNPREDICTABLE(block_width > ${N+1}) {
            $if OUT_PTRS == "MOV":
              o = oN;
            $else:
              o = (uint${SIZE}_t*) ((uintptr_t) o + minus_output_stride);
          }
          xnn_storeu_f32(o, Q6_V_lo_W(v0_${N>>1}));
          $if OUT_PTRS == "MOV":
            oN = (uint${SIZE}_t*) ((uintptr_t) o + minus_output_stride);
          if XNN_UNPREDICTABLE(block_width >= ${N}) {
            $if OUT_PTRS == "MOV":
              o = oN;
            $else:
              o = (uint${SIZE}_t*) ((uintptr_t) o + minus_output_stride);
          }
          xnn_storeu_f32(o, Q6_V_hi_W(v0_${(N-1)>>1}));
          $if OUT_PTRS == "MOV":
            oN = (uint${SIZE}_t*) ((uintptr_t) o + minus_output_stride);
        if XNN_UNPREDICTABLE(block_width > 1) {
          $if OUT_PTRS == "MOV":
            o = oN;
          $else:
            o = (uint${SIZE}_t*) ((uintptr_t) o + minus_output_stride);
        }
        xnn_storeu_f32(o, Q6_V_lo_W(v0_0));
      $else:
        $for N in reversed(range(0, TILE_HEIGHT, 2)):
          xnn_storeu_f32(o${N+1}, Q6_V_hi_W(v0_${int(N/2)})); o${N+1} = (uint${SIZE}_t*) ((uintptr_t) o${N+1} + tile_hbytes);
          xnn_storeu_f32(o${N}, Q6_V_lo_W(v0_${int(N/2)})); o${N} = (uint${SIZE}_t*) ((uintptr_t) o${N} + tile_hbytes);
    }
    $if OUT_PTRS in ["MOV", "DEC"]:
      o = (uint${SIZE}_t*) ((uintptr_t) o + tile_hbytes);

    if (bh != 0){
      // Let's try scalar implementation here.
      $if TILE_HEIGHT > 2:
      const ${TYPE}* i = i0;
      if (bh & 2) {
        $for M in reversed(range(TILE_WIDTH)):
          o${M}[0] = i0[${M}];
          o${M}[1] = i1[${M}];
          o${M} += 2;
        i = i2;
      }
      if (bh & 1) {
        $for M in reversed(range(TILE_WIDTH)):
          o${M}[0] = i[${M}];
      }
      $elif TILE_HEIGHT > 1:
        if (bh & 1) {
          $for M in reversed(range(TILE_WIDTH)):
            o${M}[0] = i0[${M}];
        }
    }

    $if IN_PTRS == "MULTI":
      i0 = (const uint${SIZE}_t*) ((uintptr_t) i0 + input_reset);
      $for N in range(1, TILE_HEIGHT):
        i${N} = (const uint${SIZE}_t*) ((uintptr_t) i${N-1} + input_stride);
    $else:
      i0 = (const uint${SIZE}_t*) ((uintptr_t) i0 + input_reset);
    $if OUT_PTRS == "MULTI":
      o0 = (uint${SIZE}_t*) ((uintptr_t) o0 + output_reset);
      $for N in range(1, TILE_HEIGHT):
        o${N} = (uint${SIZE}_t*) ((uintptr_t) o${N} + output_reset);
    $else:
      o = (uint${SIZE}_t*) ((uintptr_t) o + output_reset);
    block_width = doz(block_width, tile_width);
  } while (block_width != 0);
}


